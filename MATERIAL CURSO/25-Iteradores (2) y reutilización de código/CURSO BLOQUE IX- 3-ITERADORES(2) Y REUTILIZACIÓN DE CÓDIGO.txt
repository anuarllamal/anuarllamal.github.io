MÓDULO IX - ESTRUCTURAS DE LA PROGRAMACIÓN

BLOQUE III - ITERADORES (SEGUNDA PARTE) Y FUNCIONES PARA REUTILIZAR CÓDIGO

1) MAS ITERADORES
ITERADOR WHILE
El iterador while funciona MIENTRAS algo sea verdadero, lo ejecutara. Es similar a for, y hay que tener MUCHO ojo al redactarlo porque se puede colgar al tener una sola condicion. POr ejemplo:

var x = 10;

while (x > 0) {
    console.log("Mi variable vale "+x);
    x--;
}

Aca dara todos los resultados hasta que se termine de cumplir la condicion.


***CUANDO USO FOR Y CUANDO USO WHILE?***
-FOR sirve para cuando yo se perfectamente cuantas iteraciones va a dar el ciclo
-WHILE para cuando no tenes idea la cantidad de datos que va a arrojar, porque es MIENTRAS DURE. Por ejemplo, cuando sacas algo de una base de datos


ITERADOR DO...WHILE
Vamos con este ejemplo de codigo:
var x = 10

do {
    console.log("Mi variable vale: "+ x);
    // codigo que se ejecuta 1 vez y luego pregunta
  }
  while (x > 10);

Cual es la diferencia entre este y los otros? Que el do while ejecuta 1 vez el codigo y luego pregunta si es correcto; en las otras, chequea la condicion y arranca. Entonces te da como resultado que la variable vale 10 y deja de hacerlo porque ya no se cumple mas.


ITERADOR BREAK
La diferencia de este operador con otros es que se sale del ciclo for una vez que se cumple la condicion para salir, y te dice cuantas veces lo ejecuto antes de salir.

var x = 10;

for (x; x > 0; x--) {

    if (x == 5) {
        break;
    }
    console.log("El valor de x es :"+x); //Sentencia
}

En este caso, probo con 10-9-8-7-6-5. Llego a 5 y salio porque 5 es igual a 5 y corto con el ciclo. Es un operador que quiza no usemos tanto, pero te puede servir para delimitar perfectamente la salida del codigo for.

***RECORDA QUE EL IGUAL DE MAYOR MENOR IGUAL EN JS ES UN ==, el = solo es la definicion de variable nomas***


2) FUNCIONES
Son elementos que transforman algo en el medio, con entrada y salida. Es un bloque de codigo que busca realizar una tarea en particular y es invocada o llamada mediante un ejecutor. Permite, como primera ventaja reciclar codigo ya que encapsula a un pequeño bloque de codigo y nos permite invocarla de aqui en adelante:

-Con esta funcion, lo que haremos es que se escriba Hola mundo! en el navegador
function holaMundo() {
    console.log("Hola mundo!");
}
cada vez que invoquemos esa funcion holaMundo, aparecera hola mundo

-Lo mismo que con esta funcion suma:
function sumar(a,b) {
    var resultado = a+b;

    return resultado;
}

suma = sumar (3,4);
console.log(suma);

//Reciclamos funcion suma
suma2 = sumar (5,5);
suma3 = sumar (7,6);

Cada vez que necesitemos sumar, solo pondremos la suma de vuelta en la linea y se imprimira el resultado que necesitemos. En conclusion, todos los lenguajes trabajan de la misma forma logica, pero no quita que para cada uno de ellos tengamos que aprender sus sintaxis y prestar especial atencion a sus restricciones de si son tipados o no tipados, etc.









